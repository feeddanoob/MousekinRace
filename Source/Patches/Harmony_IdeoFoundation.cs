using HarmonyLib;
using RimWorld;
using System.Collections.Generic;
using System.Linq;
using Verse;

namespace MousekinRace
{
    // Remove autogenerated social/festival rituals for Mousekin ideologies, leaving only explicitly-defined ones
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.AddSpecialPrecepts))]
    public static class Harmony_IdeoFoundation_AddSpecialPrecepts_RemoveAutogeneratedRituals
    {
        static void Postfix(ref IdeoFoundation __instance)
        {
            if (__instance.ideo.culture.IsMousekin())
            {                
                // Identify the rituals explicitly defined for each Mousekin meme
                List<PreceptDef> hardcodedRitualPrecepts = __instance.ideo.memes.Where(m => m.requiredRituals != null).SelectMany(x => x.requiredRituals).Select(x => x.precept).ToList();

                // Remove social/festival rituals (identified by having a non-null instance count curve in their defs)
                __instance.ideo.precepts.RemoveAll(p => p is Precept_Ritual && p.def.preceptInstanceCountCurve != null && !hardcodedRitualPrecepts.Contains(p.def));

                // Remove funerals for Mousekin Brigand ideo as well
                if (__instance.ideo.culture.IsMousekinBrigandLike()) 
                {
                    // We check for defnames containing "funeral", to cover funerals with and without corpses
                    __instance.ideo.precepts.RemoveAll(p => p is Precept_Ritual && p.def.defName.ToLower().Contains("funeral"));
                }
            }
        }
    }

    // Curate rituals and buildings for Mousekin ideos
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.AddRequiredPreceptsForMemes))]
    public static class Harmony_IdeoFoundation_AddRequiredPreceptsForMemes_CurateMousekinIdeoRitualsAndBuildings
    {
        static void Postfix(ref IdeoFoundation __instance)
        {
            if (__instance.ideo.culture.IsMousekin())
            {
                // Remove any rituals blocked by any specified memes
                List<RitualWithExtraParams> ritualsWithConflicts = __instance.ideo.memes.Where(m => m.requiredRituals != null && m.HasModExtension<IdeoMemeRitualsExtension>()).SelectMany(x => x.GetModExtension<IdeoMemeRitualsExtension>().ritualsWithExtraParams).ToList();

                foreach (RitualWithExtraParams ritualWithConflict in ritualsWithConflicts)
                {
                    if (__instance.ideo.memes.Intersect(ritualWithConflict.conflictingMemes).Any())
                    {
                        __instance.ideo.precepts.RemoveAll(p => p is Precept_Ritual pRitual && pRitual.sourcePattern == ritualWithConflict.ritual.pattern);

                        __instance.ideo.precepts.RemoveAll(p => p is Precept_Building pBldg && pBldg.thingDef == ritualWithConflict.ritual.building);
                    }
                }

                // For for Mousekin ideo buildings:
                // - Ignore namemakers and simply use thingDef labels instead
                // - Remove room requirements
                foreach (Precept_Building precept in __instance.ideo.precepts.Where(p => p is Precept_Building).ToList().Cast<Precept_Building>())
                {
                    if (precept.ThingDef.defName.Contains("Mousekin"))
                    { 
                        precept.name = GenText.ToTitleCaseSmart(precept.ThingDef.LabelCap);
                        precept.presenceDemand.roomRequirements.Clear();
                    }
                }
            }
        }
    }

    // Used fixed symbols for Mousekin ideologies
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.GetRandomIconDef))]
    public static class Harmony_IdeoFoundation_GetRandomIconDef_LimitToMatchingCultures
    {
        public static void Postfix(Ideo ideo, ref IdeoIconDef __result)
        {
            if (ideo.culture?.GetModExtension<IdeoSymbolIgnoreRandomExtension>() != null)
            {
                IEnumerable<IdeoIconDef> icons = DefDatabase<IdeoIconDef>.AllDefs.Where(x => x.cultures != null && x.cultures.Contains(ideo.culture));
                if (icons.EnumerableCount() > 0)
                { 
                    __result = icons.RandomElement();
                }
            }
        }
    }

    // Prevent Ancients factions from using Mousekin cultures
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.RandomizeCulture))]
    public static class Harmony_IdeoFoundation_RandomizeCulture_HideMousekinCulturesFromCulturelessFactions
    {
        public static void Postfix(ref IdeoFoundation __instance, IdeoGenerationParms parms)
        {
            if (parms.forFaction.allowedCultures == null && __instance.ideo.culture.IsMousekin())
            {
                __instance.ideo.culture = DefDatabase<CultureDef>.AllDefsListForReading.Where(x => !x.defName.Contains("Mousekin")).RandomElement();
            }
        }
    }

    // Disallow animal and weapon precepts for Mousekin ideologies
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.RandomizePrecepts))]
    public static class Harmony_IdeoFoundation_RandomizePrecepts_NoVeneratedAnimalsAndNobleDespisedWeaponsForMousekin
    {
        public static void Postfix(ref IdeoFoundation __instance)
        {
            if (__instance.ideo.culture.IsMousekin())
            {
                __instance.ideo.precepts.RemoveAll(x => x.def == PreceptDefOf.AnimalVenerated || x.def == PreceptDefOf.NobleDespisedWeapons);
            }
        }
    }

    // Remove autogenerated building and ritual seats for Mousekin ideologies,
    // leaving only explicitly-defined ones required for rituals
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.RandomizePrecepts))]
    public static class Harmony_IdeoFoundation_RandomizePrecepts_CleanUpBuildingPreceptsForMousekin
    {
        public static void Postfix(ref IdeoFoundation __instance)
        {
            if (__instance.ideo.culture.IsMousekin())
            {
                List<ThingDef> hardcodedRitualBuildings = __instance.ideo.memes.Where(m => m.requiredRituals != null).SelectMany(x => x.requiredRituals).Select(x => x.building).ToList();

                __instance.ideo.precepts.RemoveAll(x => x is Precept_RitualSeat || (x is Precept_Building building && !hardcodedRitualBuildings.Contains(building.thingDef)));
            }
        }
    }

    // Curate preferred xenotype precepts for Mousekin ideologies
    // (instead of letting RimWorld randomly decide)
    [HarmonyPatch(typeof(IdeoFoundation), nameof(IdeoFoundation.RandomizePrecepts))]
    public static class Harmony_IdeoFoundation_RandomizePrecepts_CleanUpPreferredXenotypePreceptsForMousekin
    {
        public static void Postfix(ref IdeoFoundation __instance)
        {
            // Only for Mousekin ideos and when the Biotech DLC is active
            if (__instance.ideo.culture.IsMousekin() && ModsConfig.BiotechActive)
            {
                // Start by removing all randomly-generated preferred xenotype precepts
                __instance.ideo.precepts.RemoveAll(x => x.def == PreceptDefOf.PreferredXenotype);

                // Add the preferred xenotype precept to ideos with the Rodentkind Purity or Nutsnatching memes
                if (__instance.ideo.HasMeme(MousekinDefOf.Mousekin_IdeoMeme_RodentPurity) || __instance.ideo.HasMeme(MousekinDefOf.Mousekin_IdeoMeme_Raider))
                {                
                    Precept_Xenotype precept_Xenotype = (Precept_Xenotype)PreceptMaker.MakePrecept(PreceptDefOf.PreferredXenotype);
                    precept_Xenotype.xenotype = MousekinDefOf.Mousekin_XenotypeMousekin;
                    __instance.ideo.AddPrecept(precept_Xenotype, true);
                }
            }
        }
    }
}
